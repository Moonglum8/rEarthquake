#' @importFrom lubridate parse_date_time
#'
#' @examples
#' USA <- eq_clean_data(eq_data_raw) %>% dplyr::filter(COUNTRY %in% "USA")
#' USA_IRAN <- eq_clean_data(eq_data_raw) %>% dplyr::filter(COUNTRY %in% c("USA","IRAN"))
#'
eq_clean_data <- function(eq_data) {
# need to deal with dates BC (ie megative years)
# to do this will subtract year from "0000-01-01"
# will assume that earthquake occured at start of year if missing month
s1 <- eq_data %>%
## need to pad any years to ensure that we have YYYY format
## complicated by BCE years (negative years) set these to "0000" for now and adjust later
## use bcyears to store number to adjust BCE years by
dplyr::mutate(year = ifelse(YEAR <0, "0000",
stringr::str_pad(as.character(YEAR),4,"left","0")),
bcyear = ifelse(YEAR <0, YEAR , 0)
) %>%
## unite our AD years with month and day
tidyr::unite(datetime,year,MONTH,DAY, remove = FALSE) %>%
## s1 date finds the AD date
## set long and lat to numeric
dplyr::mutate(date_s1 = lubridate::parse_date_time(datetime, "Ymd", truncated = 2),
longitude = as.numeric(LONGITUDE),
latitude = as.numeric(LATITUDE)) %>%
## adjust s1 date by bcyears to find our formatted date
dplyr::mutate(date = date_s1 + years(bcyear)) %>%
## remove the intermediate columns we have used
dplyr::select(-date_s1,-bcyear,-year,-datetime)
## return the cleaned data
return(s1)
}
#' eq_location_clean
#'
#' Takes the raw data set and modified the column LOCATION_NAME to strip out country names and reformats to
#' title case. This is recommended before passing the data into the "_label" functions to improve presentation
#' of the output. The function can be used in conjuntion with `eq_clean_data` either before or after it in a %>% chain.
#'
#' @param eq_data
#'
#' @return A date frame with LOCATION_NAME cleaned to have country names removed and text in title case.
#' @details A regular expression is used to match and remove the country names.
#'
#' @importFrom dplyr %>%
#' @importFrom dplyr mutate
#' @importFrom dplyr filter
#' @importFrom stringr str_to_title
#' @export
#'
#' @examples
#' USA_clean_loc <- eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY %in% "USA")
#' USA_IRAN_clean_loc <- eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY %in% c("USA","IRAN"))
#'
eq_location_clean <- function(eq_data) {
eq_data %>%
## use regex to identify counties to strip out and convert to title case
dplyr::mutate(LOCATION_NAME = stringr::str_to_title(base::gsub("[^;\n]+[:]","",LOCATION_NAME)))
}
#######################################  module 2 ##########################################################
#' geom_timeline
#'
#' @param mapping
#' @param data
#' @param stat
#' @param position
#' @param na.rm
#' @param show.legend
#' @param inherit.aes
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
stat = StatTimeline, geom = geomTimeline, mapping = mapping,
data = data,  position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' geomTimeline
#' @rdname Earthquake-ggproto
#' @format NULL
#' @usage NULL
#' @export
geomTimeline <- ggplot2::ggproto("geomTimeline", Geom,
required_aes = c("x"),
optional_aes = c("y", "xmin","xmax"),
default_aes = aes(shape = 21, size = 1, colour = "blue", fill = "blue", alpha = 0.5, stroke = 1, y = 0.5),
draw_key = draw_key_point,
draw_group = function(data, panel_scales, coord) {
#  browser()
coords <- coord$transform(data, panel_scales)
# SegmentGrob to draw line where we will plot our earthquake points
seg_grob <- grid::segmentsGrob(
x0 = unit(coords$xmin,"native"),
x1 = unit(coords$xmax,"native"),
y0 = unit(coords$y,"native"),
y1 = unit(coords$y,"native"),
gp = gpar(col = "grey", alpha = 0.25)
)
# pointGrob to draw earthquakes with varying size and alpha
point_grob <- grid::pointsGrob(
x = unit(coords$x,"native"),
y = coords$y,
pch = coords$shape,
size = unit(coords$size,"mm"),
gp = grid::gpar(col = coords$colour, fill = coords$fill, alpha = coords$alpha)
)
# draws an xaxis
axis_grob <- grid::xaxisGrob()
# group our grobs together for output
grid::gTree(children = gList(seg_grob,point_grob,axis_grob))
})
#' StatTimeline
#' @rdname Earthquake-ggproto
#' @format NULL
#' @usage NULL
#' @export
StatTimeline <- ggproto("StatTimeline", Stat,
required_aes = c("x","xmin","xmax"),
# default_aes = aes(y = ..density..),
setup_params = function(data, params) {
min <- data$xmin
max <- data$xmax
list(
min = min,
max = max,
na.rm = params$na.rm
)
},
# want to filter on min and max dates and also remove any NA's from size
compute_group = function(data, scales, min, max) {
data %>% dplyr::filter(data$x > data$xmin & data$x < data$xmax & !is.na(data$size))
}
)
#' theme_timeline
#' @rdname Earthquake-theme
#' @format NULL
#' @usage NULL
#' @export
theme_timeline <- theme_classic() + theme(axis.title.x = element_text(face = "bold"),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.box = "horizontal",
legend.direction = "horizontal",
legend.position = "bottom")
#' get_timeline
#'
#' @param data_raw
#' @param clist
#' @param xmin
#' @param xmax
#'
#' @return
#' @export
#'
#' @examples
#'
#' get_timeline(eq_data_raw, c("USA","IRAN"),"1970-01-01","2016-01-01")
#'
get_timeline <- function(data_raw, clist = "ALL", xmin, xmax) {
xmin <- ymd_hm(xmin,truncated = 2)
xmax <- ymd_hm(xmax,truncated = 2)
if (!(clist[1] == "ALL")) {
eq_clean_data(data_raw) %>%
filter(COUNTRY %in% clist)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=date,y=COUNTRY,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = xmin, xmax = xmax)) +
ggplot2::scale_size_continuous(name = "Richter scale values") +
ggplot2::scale_fill_continuous(name = "# Deaths") +
ggplot2::scale_colour_continuous(name = "# Deaths") +
ggplot2::scale_alpha_continuous(name = "# Deaths")  +
theme_timeline +
ggplot2::xlab("DATE")
} else {
eq_clean_data(data_raw) %>%
ggplot2::ggplot() +
geom_timeline(aes(x=date,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = xmin, xmax = xmax)) +
ggplot2::scale_size_continuous(name = "Richter scale values") +
ggplot2::scale_fill_continuous(name = "# Deaths") +
ggplot2::scale_colour_continuous(name = "# Deaths") +
ggplot2::scale_alpha_continuous(name = "# Deaths") +
theme_timeline +
ggplot2::xlab("DATE")
}
}
#' geom_timeline_label
#'
#' @param mapping
#' @param data
#' @param stat
#' @param position
#' @param na.rm
#' @param show.legend
#' @param inherit.aes
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = geomTimelineLabel, stat = StatTimeline, mapping = mapping,
data = data,  position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' geomTimelineLabel
#' @rdname Earthquake-ggproto
#' @format NULL
#' @usage NULL
#' @export
geomTimelineLabel <- ggplot2::ggproto("geomTimelineLable", Geom,
required_aes = c("x","location"),
optional_aes = c("y","n_max"),
default_aes = aes(size =0, y = 0.5, fontsize = 8, alpha = 0.75, colour = "blue", fill = "blue"),
draw_key = draw_key_blank,
draw_panel = function(data, panel_scales, coord) {
data
# browser()
if ("n_max" %in% names(data)) {
nm <-  data$n_max[1]
} else {
nm <- 0
}
if ("n_max" %in% names(data) & nrow(data) > nm) {
data <- data %>%
dplyr::group_by(y) %>%
dplyr::top_n(n = data$n_max[1], wt = size)
data
}
coords <- coord$transform(data, panel_scales)
# SegmentGrob to draw lines where we will plot our earthquake points
seg_grob <- grid::segmentsGrob(
x0 = unit(coords$x,"native"),
x1 = unit(coords$x,"native"),
y0 = unit(coords$y,"native"),
y1 = unit(coords$y + 0.05,"native"),
gp = gpar(col = "grey", alpha = 0.75)
)
# textGrob to print location
text_grob <- grid::textGrob(
label = coords$location,
x = unit(coords$x,"native"),
y = unit(coords$y + 0.06,"native"),
rot = 45,
just = "left",
gp = gpar(fontsize = 8)
)
# group our grobs together for output
grid::gTree(children = gList(seg_grob,text_grob))
})
#' get_timeline_label
#'
#' @param data_raw
#' @param clist
#' @param xmin
#' @param xmax
#' @param n_max
#'
#' @return
#' @export
#'
#' @examples
#'
#' get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
#'
get_timeline_label <- function(data_raw, clist = "ALL", xmin, xmax, n_max = 5) {
#browser()
xmin <- ymd_hm(xmin,truncated = 2)
xmax <- ymd_hm(xmax,truncated = 2)
if (!(clist[1] == "ALL")) {
eq_clean_data(data_raw) %>% eq_location_clean() %>%
filter(COUNTRY %in% clist)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=date,y=COUNTRY,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = xmin, xmax = xmax)) +
geom_timeline_label(aes(x=date, location=LOCATION_NAME,xmin=xmin,xmax=xmax,size=EQ_PRIMARY,n_max=n_max,y=COUNTRY)) +
ggplot2::scale_size_continuous(name = "Richter scale values") +
ggplot2::scale_fill_continuous(name = "# Deaths") +
ggplot2::scale_colour_continuous(name = "# Deaths") +
ggplot2::scale_alpha_continuous(name = "# Deaths")  +
theme_timeline +
ggplot2::xlab("DATE")
} else {
eq_clean_data(data_raw) %>% eq_location_clean() %>%
ggplot2::ggplot() +
geom_timeline(aes(x=date,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = xmin, xmax = xmax)) +
geom_timeline_label(aes(x=date, location=LOCATION_NAME,xmin=xmin,xmax=xmax,size=EQ_PRIMARY,n_max=n_max,y=NULL)) +
ggplot2::scale_size_continuous(name = "Richter scale values") +
ggplot2::scale_fill_continuous(name = "# Deaths") +
ggplot2::scale_colour_continuous(name = "# Deaths") +
ggplot2::scale_alpha_continuous(name = "# Deaths") +
theme_timeline +
ggplot2::xlab("DATE")
}
}
#######################################  module 3 ##########################################################
#' eq_map
#'
#' @param eq_data
#' @param annot_col
#'
#' @return
#' @export
#'
#' @examples
eq_map <- function(eq_data, annot_col) {
leaflet::leaflet() %>% leaflet::addTiles() %>% leaflet::addCircleMarkers(data=eq_data,
lng = ~ longitude,
lat = ~latitude,
radius = ~EQ_PRIMARY,
popup = ~ eq_data[[annot_col]])
}
#' eq_create_label
#'
#' @param eq_data
#'
#' @return
#' @export
#'
#' @examples
#'
#' eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>% mutate(popup_text = eq_create_label(.)) %>% eq_map(annot_col="popup_text")
#'
eq_create_label <- function(eq_data) {
loc <- ifelse(is.na(eq_data$LOCATION_NAME),"",paste("<b>Location:</b>", eq_data$LOCATION_NAME, "<br />"))
mag <- ifelse(is.na(eq_data$EQ_PRIMARY),"",paste("<b>Magnitude:</b>", eq_data$EQ_PRIMARY, "<br />"))
death <- ifelse(is.na(eq_data$TOTAL_DEATHS),"",paste("<b>Total deaths:</b>", eq_data$TOTAL_DEATHS, "<br />"))
out <- paste(loc,mag,death)
return(out)
}
get_timeline(eq_data_raw, c("USA","IRAN"),"1970-01-01","2016-01-01")
get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>% mutate(popup_text = eq_create_label(.)) %>% eq_map(annot_col="popup_text")
eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY == "USA" & lubridate::year(date) >= 2000) %>% mutate(popup_text = eq_create_label(.)) %>% eq_map(annot_col="popup_text")
eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY == "UK" & lubridate::year(date) >= 2000) %>% mutate(popup_text = eq_create_label(.)) %>% eq_map(annot_col="popup_text")
eq_clean_data(eq_data_raw) %>% eq_location_clean() %>% filter(COUNTRY == "CHINA" & lubridate::year(date) >= 2000) %>% mutate(popup_text = eq_create_label(.)) %>% eq_map(annot_col="popup_text")
class(geom_timeline)
devtools::use_vignette("rEarthquake")
data_raw <-system.file("extdata", "signif.txt", package = "rEarthquake")
data_raw
data_raw <-system.file("inst/extdata", "signif.txt", package = "rEarthquake")
data_raw
data_raw <-system.file("./inst/extdata", "signif.txt", package = "rEarthquake")
data_raw
library(testthat)
?test_check
vignette("testthat")
devtools::load_all()
get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
?test_that
class(eq_clean_data(eq_data_raw))
expect_is(eq_clean_data(eq_data_raw)),"data.frame")
expect_is(eq_clean_data(eq_data_raw),"data.frame")
expect_is(eq_clean_data(eq_data_raw),"numeric")
test_data_clean <- eq_clean_data(eq_data_raw)
expect_is(test_data_clean,"data.frame")
expect_is(test_data_clean$date,"POSIXct")
expect_is(test_data_clean$longitude,"numeric")
expect_is(test_data_clean$latitude,"numeric")
test_data_clean <- eq_clean_data(eq_data_raw)
test_that("eq_clean_data has correct classes", {
expect_is(test_data_clean,"data.frame")
expect_is(test_data_clean$date,"POSIXct")
expect_is(test_data_clean$longitude,"numeric")
expect_is(test_data_clean$latitude,"numeric")
})
test_data_clean_loc <- eq_clean_data(eq_data_raw)
expect_is(test_data_clean_loc,"data.frame")
expect_is(test_data_clean_loc$LOCATION_NAME,"character")
library(dplyr)
library(lubridate)
test_data_annote <- test_data_clean %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col="popup_text")
test_that("eq_create_label has correct classes", {
expect_is(test_data_annote,"data.frame")
expect_is(test_data_annote$popup_text,"character")
})
library(dplyr)
library(lubridate)
test_data_annote <- test_data_clean %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
View(test_data_annote)
library(dplyr)
library(lubridate)
test_data_annote <- test_data_clean %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
test_that("eq_create_label has correct classes", {
expect_is(test_data_annote,"data.frame")
expect_is(test_data_annote$popup_text,"character")
})
test_map <- test_data_annote %>% eq_map(annot_col="popup_text")
class(test_map)
str(test_map)
geom_timeline(aes(x=date,y=COUNTRY,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = lubridate::ymd("2000-01-01"), xmax = lubridate::ymd("2016-01-01")))
test_geom_timeline <- geom_timeline(aes(x=date,y=COUNTRY,colour=DEATHS, size=EQ_PRIMARY, fill=DEATHS, xmin = lubridate::ymd("2000-01-01"), xmax = lubridate::ymd("2016-01-01")))
class(test_geom_timeline)
test_geom_timeline <- geom_timeline()
class(test_geom_timeline)
## geom_timeline test
test_geom_timeline <- geom_timeline()
test_that("geom_timeline has correct class", {
expect_is(test_geom_timeline ,"ggproto")
})
test_geom_timeline_label <- geom_timeline_label()
test_that("geom_timeline_label has correct class", {
expect_is(test_geom_timeline_label ,"ggproto")
})
test_get_timeline <- get_timeline(eq_data_raw, c("USA","IRAN"),"1970-01-01","2016-01-01")
class(test_get_timeline)
test_get_timeline_label <- get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
test_that("get_timeline_label has correct class", {
expect_is(test_get_timeline_label ,"ggplot")
})
library(rEarthquake)
## eq_clean_data tests
test_data_clean <- eq_clean_data(eq_data_raw)
test_that("eq_clean_data has correct classes", {
expect_is(test_data_clean,"data.frame")
expect_is(test_data_clean$date,"POSIXct")
expect_is(test_data_clean$longitude,"numeric")
expect_is(test_data_clean$latitude,"numeric")
})
## eq_location_clean_data tests
test_data_clean_loc <- eq_clean_data(eq_data_raw)
test_that("eq_location_clean has correct classes", {
expect_is(test_data_clean_loc,"data.frame")
expect_is(test_data_clean_loc$LOCATION_NAME,"character")
})
## eq_create_label tests
library(dplyr)
library(lubridate)
test_data_annote <- test_data_clean %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(date) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
test_that("eq_create_label has correct classes", {
expect_is(test_data_annote,"data.frame")
expect_is(test_data_annote$popup_text,"character")
})
## eq_map tests
library(leaflet)
test_map <- test_data_annote %>% eq_map(annot_col="popup_text")
test_that("eq_map has correct class", {
expect_is(test_map ,"leaflet")
})
## geom_timeline test
library(ggplot2)
library(grid)
test_geom_timeline <- geom_timeline()
test_that("geom_timeline has correct class", {
expect_is(test_geom_timeline ,"ggproto")
})
## geom_timeline_label test
test_geom_timeline_label <- geom_timeline_label()
test_that("geom_timeline_label has correct class", {
expect_is(test_geom_timeline_label ,"ggproto")
})
## get_timeline test
test_get_timeline <- get_timeline(eq_data_raw, c("USA","IRAN"),"1970-01-01","2016-01-01")
test_that("get_timeline has correct class", {
expect_is(test_get_timeline_label ,"ggplot")
})
## get_timeline_label test
test_get_timeline_label <- get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
test_that("get_timeline_label has correct class", {
expect_is(test_get_timeline_label ,"ggplot")
})
dplyr::%>%
dplyr::a:%>%
dplyr:::%>%
?assign
library(qpdf)
install.packages("qpdf")
xmax = lubridate::ymd("2016-01-01")))
lubridate::ymd("2000-01-01")
class(lubridate::ymd("2000-01-01"))
class(lubridate::ymd_hm("2000-01-01",truncated = 2))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
install.packages("qpdf")
library(rEarthquake)
rm(ls())
rm(list=ls())
rEarthquake::eq_data_raw
data_raw <-system.file("extdata", "signif.txt", package = "rEarthquake")
vignette("rEarthquake")
get_timeline(eq_data_raw, c("USA","IRAN"),"1970-01-01","2016-01-01")
get_timeline_label(eq_data_raw, c("USA","CHINA"),"2010-01-01","2016-01-01", n_max = 5)
devtools::build_vignettes()
vignette("rEarthquake")
vignette()
library(rEarthquake)
vignette()
vignette("rEarthquake")
